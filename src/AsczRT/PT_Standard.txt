
pathtrace:
    Ray = camera ray at the current pixel

    throughput = { 1.0f, 1.0f, 1.0f }
    radiance = { 0.0f, 0.0f, 0.0f }

    for bounce from 0 to MAX_BOUNCES:
        HitInfo { t, u, v, idx } = traverse and find closest intersection

        if idx == -1: break

        vertex = ray.o + ray.d * t

        material = material of hit surface

        // Texture interpolation (if available)
        if has Texture: albedo = lookupTexture(material, u, v)
        else:           albedo = material.albedo

        normal = u * n0 + v * n1 + w * n2

        radiance = radiance + throughput x material.EmissionColor x material.EmissionStrength
        throughput = throughput x albedo

        newDirection = sampleHemisphere(normal)
        ray = { vertex, newDirection }


    frameBuffer[of this pixel] = tonemapping(radiance)

