
pathtrace:
    Ray = camera ray at the current pixel

    const int MAX_NODES = 64
    const int MAX_BOUNCES = 4

    throughput = { 1.0f, 1.0f, 1.0f }
    radiance = { 0.0f, 0.0f, 0.0f }

    for bounce from 0 to MAX_BOUNCES:
        HitInfo { t, u, v, idx } = traverse and find closest intersection

        if idx == -1: break

        // Vertex interpolation
        Flt3 vrtx = ray.o + ray.d * t

        // Texture interpolation (if available)
        if has Texture: alb = lookupTexture(u, v)
        else:           alb = material.Alb

        // Normal interpolation
        Flt3 nrml = u * n0 + v * n1 + w * n2

        radiance += throughput x (alb x hm.Ems)

        // Direct lighting
        for all Light (keep in mind Light is a triangle):
            lPos = randomPointOnTriangle(Light)
            lDir = lPos - vrtx

            inLight = traverse and find any intersection

            diff = computeLighting(alb + other stuff)

            resultColor += (throughput x diff x lMat.Ems) * inLight

        // Indirect lighting
        ray.o = vrtx
        ray.d = randomHemisphereSample(&rnd, nrml)
        ray.invd = 1.0f / ray.d
        ray.ignore = hidx

        throughput x= alb * 1/Pi

        radiance += resultColor


    frmbuffer[tIdx] = tonemapping(radiance)

